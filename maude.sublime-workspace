{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"t",
				"T"
			],
			[
				"r",
				"R"
			],
			[
				"mete",
				"metaPrettyPrint"
			],
			[
				"Aximo",
				"AxiomList"
			],
			[
				"R",
				"RSLAssertion"
			],
			[
				"Hoare",
				"HoareQuadruple"
			],
			[
				"Con",
				"ConditionalStatement"
			],
			[
				"apply",
				"applyAuxVarElimination"
			],
			[
				"Logi",
				"LogicalVariable"
			],
			[
				"Goal",
				"GoalGraph"
			],
			[
				"PROVER-",
				"PROVER-INTERFACE"
			],
			[
				"idea",
				"ideaIU-2018"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\nload prover-grammar.maude\nmod PROVER-INTERFACE is\n\tincluding LOOP-MODE .\n\tincluding PROVER-GRAMMAR . \n\tprotecting META-LEVEL .  \n\n\t--- A state in the REPL is represented as follows :\n\t--- \tAction = rule to be applied\n\t---\t\tGoal = Root goal which we are trying to prove\n\t---\t\tGoal = Current goal which is being proven - \n\t---\t\t\tneeds to be linked to a node in the graph below\n\t--- \tGoalGraph = A graph of goals needed to be proven\n\t---\t\tGoalList = A list of goals which we know are true  \n\t---\t\tQidList = the output of the last action\n\top <_;_;_;_;_;_> : Action Goal Goal GoalGraph GoalList QidList -> State .\n\n\top init : -> System [ctor].\n\n\teq init = [nil, < noAction ; noGoal ; noGoal ; emptyGL ; emptyGL ; nil >, nil ] .\n\n\tvar A : Action . \n\tvars QIL QIL' QIL'' : QidList .\n\t--- Root goal\n\tvar RG : Goal . \n\tvar G : Goal .\n\t--- Temporarily is just a list, will be turned into a graph\n\tvar GG : GoalList . \n\tvar GL : GoalList . \n\t--- Rule handling the input to the program\n\tcrl [in] : \n\t\t[QIL, < noAction ; RG ; G ; GG ; GL ; nil > , QIL']\n\t\t=> \n\t\t\tif T:ResultPair? :: ResultPair  \n\t          then [nil,  \n\t                < downTerm(getTerm(T:ResultPair?), noAction) ; RG ; G ; GG ; GL ; nil >,  \n\t                QIL']  \n\t          else [nil, < noAction ; RG ; G ; GG ; GL ; nil >, 'ERROR QIL]  \n\t          fi  \n\t\tif QIL =/= nil\n\t\t /\\ T:ResultPair? := metaParse(upModule('PROVER-GRAMMAR, false), QIL, 'Action) .\n\n\n    crl [out] :\n       [QIL, < A ; RG ; G ; GG ; GL ;  QIL' >, QIL'']\n       => [QIL, < A ; RG ; G ; GG ; GL ; nil >, QIL''  QIL']\n       if QIL' =/= nil .\n\n\n    --- begin interface rules \n    var HQ : HoareQuadruple .\n    rl [proveGoal] : < prove(HQ) ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; HQ ; noGoal ; HQ <> emptyGL ; \n\t\tdownTerm('`{_`}_`{_`}['_|->_['E:AExp,'s_['0.Zero]],'`[_`]:=_['E:AExp,'F:AExp],'_|->_['E:AExp,'F:AExp]] , emptyGL)\n\t\t<> downTerm('`{_`}_`{_`}['_|->_['E1:AExp,'E2:AExp],'_:=`[_`]['v:Id,'E1:AExp],'_*_['_/\\_['emp.Assertion, '_eqs_['v:Id,'E2:AExp]],'_|->_['E1:AExp,'E2:AExp]]] , emptyGL)\n\t\t<> downTerm('`{_`}_`{_`}['S:Assertion,'pass.Command,'S:Assertion], emptyGL)\n\t\t; 'begin '\\n > .\n\n\t--- after processing a goal, take the first element from that list to prove it\n\tcrl [takeFirstGoalFromList] : < noAction ; RG ; noGoal ; G <> GG ; GL ; nil > \n\t\t=> \n\t\t< check ; RG ; G ; GG ; GL ; 'current ' 'goal '  '  'is '\\n metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(G)) '\\n > \n\t\tif G =/= noGoal .\n\n\t--- mark the current goal as done, by adding it to the proven goals list\n\t--- add a metaPrettyPrint call here \n\trl [markGoalProven] : < ok ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\t< noAction ; RG ; noGoal ; GG ; GL <> G ; 'admitted '  'goal ': '\\n  metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(G)) '\\n > .\n\n\tcrl [stopProcessing] : < noAction ; RG ; noGoal ; emptyGL ; GL ; nil >\n\t\t=>\n\t\t< stop ; RG ; noGoal ; emptyGL ; GL ; metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(RG)) '\\n 'goal ' 'has '  'been ' 'proven '\\n >\n\t\tif RG =/= noGoal .\n\t\n\tcrl [alreadyProvenGoal] : < check ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\tif G1:Goal? :: Goal \n\t\tthen \n\t\t\t< noAction ; RG ; noGoal ; GG ; GL ; metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(G)) '\\n 'was ' 'matched ' 'with '\\n metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(G1:Goal?)) '\\n >\n\t\telse\n\t\t\t--- Keep on going, the check failed\n\t\t\t< implication ; RG ; G ; GG ; GL ; nil >\n\t\tfi \n\t\tif G1:Goal? := anyMatches(G, GL) .\n\n\tcrl [tryToProveImplication] : < implication ; RG ; G ; GG ; GL ; nil > \n\t\t=> \n\t\tif Tr:[Trace?] :: Trace then \n\t\t\t< noAction ; RG ; noGoal ; GG ; GL ; metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(G)) '  'auto-proved '\\n \n\t\t\t\t\t\t\t\t\t'using ': '\\n metaPrettyPrint(upModule('IMPLICATION-PROVER, false), upTerm(Tr:[Trace?])) '\\n > \n\t\telse \n\t\t\t--- The goal could not be proven using the implication prover (Goal might not be an implication or we simply couldn't)\n\t\t\t< noAction ; RG ; G ; GG ; GL ; 'didn't '  'auto '\\n > \n\t\tfi\n\t\tif Tr:[Trace?] := tryImplicationProving(G) .  \n\n\trl [showCurrentGoal] : < showGoal ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\t< noAction ; RG ; G ; GG ; GL ; metaPrettyPrint(upModule('PROVER-INTERFACE, false), upTerm(G)) '\\n > .\n\t--- end interface rules\n\n\n\tvars R S T : Relation .\n\tvars R1 R2 S1 S2 : Relation .\n\tvar P Q V W P1 Q1 : Assertion .\n\tvar X Y : Command .\n\tvar C1 C2 C1' C2' : Command .\n\tvar B B' : BExp . \n\tvar C C' : Command .\n\tvar Var : Id .\n\tvar SubGoals? : [Result4Tuple] .\n\tvar SubGoals : GoalList .\n\n\t--- general format for action rules:\n\t---\t\tGoal => GoalList . \n\trl [EmbeddingRule] : {[ P ; V ]} X -- Y {[ Q ; W ]} => {P} X {Q} <> {V} Y {W} [nonexec] .\n\n\trl [FrameRule] : { R * T } X -- Y { S * T } => {R} X -- Y {S} [nonexec] .\n\n\trl [SeparationLogic-FrameRule] :  {P * V} C {Q * V} => {P} C {Q} [nonexec] .\n\n\t--- This rule will trigger a warning regarding using the S variable before being bound, but in the META-LEVEL it should be ok if we bind it manually\n\trl [Sequencing] : { R }  C1 ; C2 -- C1' ; C2' { T } => { R } C1 -- C1' {S} <> {S} C2 -- C2' {T} [nonexec] . \n\n\trl [SeparationLogic-Sequencing] :  {P} C1 ; C2 {Q} => {P} C1 {V} <> {V} C2 {Q} [nonexec] .\n\n\t--- Same case as above for R1 and S1\n\trl [Consequence] : { R } X -- Y { S } => ((R => R1) <> ({R1} X -- Y {S1})) <> (S1 => S) [nonexec] .\n\n\trl [SeparationLogic-Consequence] : {P} C {Q} => ((P => P1) <> ({P1} C {Q1})) <> (Q1 => Q) [nonexec] .\n\n\trl [Conjunction] : { R1 /\\ R2 } X -- Y { S1 /\\ S2 } => {R1} X -- Y {S1} <> {R2} X -- Y {S2} [nonexec] .\n\n\trl [AuxVarElimination] : {exists Var . R} C -- C' {exists Var . S} => {R} C -- C' {S} [nonexec] .\n\n\t--- We need to add the condition under which this is true\n\trl [SeparationLogic-AuxVarElimination] : {exists Var . P } C { exists Var .  Q} => {P} C {Q} [nonexec] .\n\n\trl [Loop] : {R} while B do C od -- while B' do C' od {R /\\ ! B} => (R => (B <=> B')) <> {R /\\ B} C -- C' {R} [nonexec] .\n\n\t--- Here P is the loop invariant\n\trl [SeparationLogic-Loop] : {P} while B do C od { ! B /\\ P } => {P /\\ B} C {P} [nonexec] .\n\n\n\trl [ConditionalStatement] : {R} if B then C1 else C2 -- if B' then C1' else C2' {S} \n\t\t=>\n\t\t((R => (B <=> B')) <> ({R /\\ B} C1 -- C1' {S})) <> ({R /\\ ! B} C2 -- C2' {S}) [nonexec] .\n\n\trl [SeparationLogic-ConditionalStatement] : {P} if B then C1 else C2 {Q} => {B /\\ P} C1 {Q} <> { ! B /\\ P } C2 {Q} [nonexec] .\n\n\n\tcrl [applyEmbeddingRule] : < applyEmbeddingRule ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'embedding '  'rule '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'EmbeddingRule, none, 0, unbounded, 0) .\n\n\tcrl [applyFrameRule] : < applyFrameRule T ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG  ; GL ; 'applied '  'frame '  'rule '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'FrameRule, 'T:Relation <- getTerm(metaReduce(upModule('PROVER-INTERFACE, false), upTerm(T))), 0, unbounded, 0) .\n\n\tcrl [SLapplyFrameRule] : < SLapplyFrameRule V ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'frame '  'rule '  'SL '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'SeparationLogic-FrameRule, 'V:Assertion <- getTerm(metaReduce(upModule('PROVER-INTERFACE, false), upTerm(V))), 0, unbounded, 0) .\n\n\tcrl [applySequencing] : < applySequencing S ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'sequencing '  'rule '\\n  > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'Sequencing, 'S:Relation <- upTerm(S), 0, unbounded, 0) .\n\n\tcrl [SLapplySequencing] : < SLapplySequencing V ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'sequencing '  'rule '  'SL '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'SeparationLogic-Sequencing, 'V:Assertion <- upTerm(V), 0, unbounded, 0) .\n\n\tcrl [applyConsequence] : < applyConsequence R1 -- S1 ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\tif SubGoals? :: Result4Tuple then \n\t\t\tif downTerm(getTerm(SubGoals?), emptyGL) :: GoalList then\n\t\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'consequence '  'rule '\\n > \n\t\t\telse\n\t\t\t< noAction ; RG ; G ; GG ; GL ; 'wrong '  'consequence '  'rule '\\n > \n\t\t\tfi\n\t\telse \n\t\t< noAction ; RG ; G ; GG ; GL ; 'error '  'consequence '  'rule '\\n > \n\t\tfi \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'Consequence, 'R1:Relation <- upTerm(R1) ; 'S1:Relation <- upTerm(S1) , 0, unbounded, 0).\n\n\n\tcrl [SLapplyConsequence] : < SLapplyConsequence P1 -- Q1 ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'consequence '  'rule '  'SL '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'SeparationLogic-Consequence, 'P1:Assertion <- upTerm(P1) ; 'Q1:Assertion <- upTerm(Q1) , 0, unbounded, 0) .\n\n\tcrl [applyConjunction] : < applyConjunction R1 -- R2 -- S1 -- S2 ; RG ; G ; GG ; GL ; nil >\n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'conjuction '  'rule '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'Conjunction, 'R1:Relation <- upTerm(R1) ; 'R2:Relation <- upTerm(R2) ; 'S1:Relation <- upTerm(S1) ; 'S2:Relation <- upTerm(S2) , 0, unbounded, 0) .\n\n\t--- todo the logical variable sort is  probably of sort qid or something, need to think this well\n\tcrl [applyAuxVarElimination] : < applyAuxVarElimination Var ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'aux-var-elim '  'rule '\\n  > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'AuxVarElimination, 'Var:Id <- upTerm(Var), 0, unbounded, 0) .\n\n\tcrl [SLapplyAuxVarElimination] : < SLapplyAuxVarElimination Var ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'aux-var-elim '  'rule '  'SL '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'SeparationLogic-AuxVarElimination, 'Var:Id <- upTerm(Var), 0, unbounded, 0) .\n\n\tcrl [applyLoop] : < applyLoop ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'Loop '  'rule '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'Loop, none, 0, unbounded, 0) .\n\n\tcrl [SLapplyLoop] : < SLapplyLoop ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'Loop '  'rule '  'SL '\\n  > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'SeparationLogic-Loop, none, 0, unbounded, 0) .\n\n\tcrl [applyConditionalStatement] : < applyConditionalStatement ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <> GG ; GL ; 'applied '  'conditional '  'rule '\\n > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'ConditionalStatement, none, 0, unbounded, 0) .\n\n\tcrl [SLapplyConditionalStatement] : < SLapplyConditionalStatement ; RG ; G ; GG ; GL ; nil > \n\t\t=>\n\t\t< noAction ; RG ; noGoal ; downTerm(getTerm(SubGoals?), emptyGL) <>  GG ; GL ; 'applied '  'conditional '  'rule '  'SL '\\n  > \n\t\tif SubGoals? := metaXapply(upModule('PROVER-INTERFACE, false),\n\t\t\t\t\t\tupTerm(G), 'SeparationLogic-ConditionalStatement, none, 0, unbounded, 0) .\n\nendm\n",
			"file": "prover/prover-interface.maude",
			"file_size": 11834,
			"file_write_time": 131739776553052994,
			"settings":
			{
				"buffer_size": 11890,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/goal-graph.maude",
			"settings":
			{
				"buffer_size": 1267,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/implication-prover.maude",
			"settings":
			{
				"buffer_size": 1461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/prover-grammar.maude",
			"settings":
			{
				"buffer_size": 2130,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Todo licenta:\n\t-> semnaleaza diferentele subtile intre egal si |->, etc., cum sa ajuti omul sa inteleaga mai bine ce ai facut acolo\n\n\n\nQuestions :\n\t-> Trebuie sa fie stil de documentatie, adica sa spun cum sa fie folosit?\n\t-> Are limita de pagini sau nu?\n\t-> Cand trebuie sa fie gata? ",
			"file": "prover/language/Todo licenta:",
			"file_size": 255,
			"file_write_time": 131735218352027418,
			"settings":
			{
				"buffer_size": 285,
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/separation-logic.maude",
			"settings":
			{
				"buffer_size": 811,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 75.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ma",
				"Set Syntax: Maude"
			],
			[
				"m",
				"Set Syntax: Maude"
			],
			[
				"MAU",
				"Set Syntax: Maude"
			],
			[
				"maud",
				"Set Syntax: Maude"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"set syntax maude",
				"Set Syntax: Maude"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"maude",
				"Set Syntax: Maude"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 533.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/alin/Licenta/MaudePlayground",
		"/home/alin/Licenta/MaudePlayground/prover",
		"/home/alin/Licenta/MaudePlayground/prover/language"
	],
	"file_history":
	[
		"/home/alin/Licenta/MaudePlayground/prover/language/Todo licenta:",
		"/home/alin/Licenta/MaudePlayground/prover/relational-sep-logic.maude",
		"/home/alin/Licenta/MaudePlayground/prover/implication-prover.maude",
		"/home/alin/Licenta/MaudePlayground/prover/runner.maude",
		"/home/alin/Licenta/MaudePlayground/prover/prover-grammar.maude",
		"/home/alin/Licenta/MaudePlayground/prover/separation-logic.maude",
		"/home/alin/Licenta/MaudePlayground/prover/language/language_grammar.maude",
		"/home/alin/Licenta/MaudePlayground/prover/goal-graph.maude",
		"/home/alin/Licenta/MaudePlayground/prover/prover-interface.maude",
		"/home/alin/Licenta/MaudePlayground/prover/examples.maude",
		"/home/alin/Licenta/MaudePlayground/prover/matching.maude",
		"/home/alin/Licenta/MaudePlayground/prover/axiom-matching.maude",
		"/home/alin/.config/i3/config",
		"/home/alin/LinuxSetup/ProvisioningScripts/install_i3.sh",
		"/home/alin/backup_hdd_win/alin/ProvisioningScripts/checklist",
		"/usr/projects/MaudePlayground/prover/examples.maude",
		"/usr/projects/MaudePlayground/prover/prover-grammar.maude",
		"/usr/projects/MaudePlayground/prover/language/language_grammar.maude",
		"/usr/projects/MaudePlayground/prover/separation-logic.maude",
		"/usr/projects/MaudePlayground/prover/experiments.maude",
		"/usr/projects/MaudePlayground/prover/relational-sep-logic.maude",
		"/usr/projects/MaudePlayground/prover/prover-interface.maude",
		"/usr/projects/MaudePlayground/prover/goal-graph.maude",
		"/usr/projects/MaudePlayground/limbaj_simplu.maude",
		"/usr/projects/MaudePlayground/limbaj_separat.maude",
		"/home/alin/bin/maude/maude_itp/itp-tool.maude",
		"/home/alin/projects/Licenta/MaudePlayground/setup_jetbrains_config_and_system_paths.sh",
		"/home/alin/projects/Licenta/MaudePlayground/limbaj_simplu.maude",
		"/home/alin/projects/Licenta/MaudePlayground/hoare_quadruple.maude",
		"/home/alin/projects/Licenta/MaudePlayground/prover-interface.maude",
		"/home/alin/Documents/list.fm",
		"/home/alin/.zshrc",
		"/home/alin/.config/i3blocks/config",
		"/home/alin/bin/cyclist/myocamlbuild.ml",
		"/home/alin/ProvisioningScripts/install_i3.sh",
		"/home/alin/.config/rofi/config",
		"/home/alin/ProvisioningScripts/install_monaco_font.sh",
		"/etc/apt/sources.list.d/google-chrome.list",
		"/etc/apt/sources.list.d/google.list",
		"/etc/i3status.conf",
		"/home/alin/rofi-example.config",
		"/home/alin/ProvisioningScripts/install_git.sh",
		"/home/alin/ProvisioningScripts/install_google_chrome.sh",
		"/home/alin/ProvisioningScripts/checklist",
		"/home/alin/ProvisioningScripts/install_zsh.sh",
		"/home/alin/ProvisioningScripts/projects_folder.sh",
		"/home/alin/ProvisioningScripts/install_intellij.sh",
		"/home/alin/ProvisioningScripts/install_",
		"/home/alin/ProvisioningScripts/install_webstorm.sh",
		"/home/alin/ProvisioningScripts/install_pycharm.sh",
		"/home/alin/ProvisioningScripts/install_clion.sh",
		"/home/alin/ProvisioningScripts/install_nodejs.sh",
		"/home/alin/ProvisioningScripts/install_SFNS_font.sh",
		"/home/alin/ProvisioningScripts/install_font_awesome.sh",
		"/home/alin/ProvisioningScripts/install_java"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			"",
			"SLAssertion"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"noRule",
			"=",
			"eq",
			"\n\t---",
			"\n\t",
			" \n",
			"nogoal",
			"ctor",
			" [",
			"format (d n nt d)",
			"format (d ct no d)",
			"format (c t ns o)",
			"P1",
			"10",
			"3",
			"upTerm",
			"noGoal",
			"LV",
			"SLHeap",
			"LogicalVariable",
			"Stmt",
			"RAssertion",
			"SLAssertion",
			"code",
			"fmod"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"noAction",
			"=>",
			"rl",
			"\n\t",
			"\n\t---",
			"format (d n t d)",
			"format (d n nt d)",
			"format (d ct no d)",
			"Command",
			"Relation",
			"Assertion"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "prover/prover-interface.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11890,
						"regions":
						{
						},
						"selection":
						[
							[
								1006,
								1006
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "prover/goal-graph.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1267,
						"regions":
						{
						},
						"selection":
						[
							[
								1252,
								1252
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 30.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "prover/implication-prover.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1461,
						"regions":
						{
						},
						"selection":
						[
							[
								357,
								357
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "prover/prover-grammar.maude",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2130,
						"regions":
						{
						},
						"selection":
						[
							[
								978,
								978
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "prover/language/Todo licenta:",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 285,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "prover/separation-logic.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 811,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 52.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "maude.sublime-project",
	"replace":
	{
		"height": 75.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 281.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
