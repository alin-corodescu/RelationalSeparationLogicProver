{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"auto",
				"auto-approved"
			],
			[
				"Aximo",
				"AxiomList"
			],
			[
				"R",
				"RSLAssertion"
			],
			[
				"Hoare",
				"HoareQuadruple"
			],
			[
				"Con",
				"ConditionalStatement"
			],
			[
				"apply",
				"applyAuxVarElimination"
			],
			[
				"Logi",
				"LogicalVariable"
			],
			[
				"Goal",
				"GoalGraph"
			],
			[
				"PROVER-",
				"PROVER-INTERFACE"
			],
			[
				"idea",
				"ideaIU-2018"
			]
		]
	},
	"buffers":
	[
		{
			"file": "prover/relational-sep-logic.maude",
			"settings":
			{
				"buffer_size": 958,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/prover-interface.maude",
			"settings":
			{
				"buffer_size": 11587,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n\nload prover-interface.maude\nloop init .\n(prove(\n\t{ \n\t\t((\n\t\t\tSame \n\t\t\t*\n\t\t\tList(c) \n\t\t\t*\n\t\t\t[ y |-> x0 ; yp |-> x0 ]\n\t\t) \n\t\t*\n\t\t(y eqs yp /\\ Emp))\n\t\t*\n\t\t(c eqs cp /\\ Emp)\n\t}\n\tpass ; \n\twhile (! (c eqs null))\n\tdo \n\t\tx := [y] ; \n\t\t[c] := 0 minus x ;\n\t\tc := [c plus 1]\n\tod\n\t--\n\txp := [yp] ;\n\twhile (! (cp eqs null))\n\tdo \n\t\t[cp] := 0 minus xp ;\n\t\tcp := [cp plus 1] \n\tod\n\t{\n\t\t(Same\n\t\t*\n\t\t(y eqs yp /\\ Emp))\n\t\t* \n\t\t(c eqs cp /\\ Emp)\n\t}\n\t)\n)\n\n(applySequencing ( Same * List(c) * [ y |-> x0 ; yp |-> x0 ] * (y eqs yp /\\ Emp) * (c eqs cp /\\ Emp) * (xp eqs x0 /\\ Emp) ) )\n\n\n(applyFrameRule (Same * List(c) * (y eqs yp /\\ Emp) * (c eqs cp /\\ Emp)) ) --- aici e interesant ca se face matching si dupa comutativitate\n\n(\n\tapplyConsequence\n\t( [ (y |-> x0) ; (yp |-> x0) ] )\n\t--\n\t( [ (y |-> x0) ; ((yp |-> x0) * (xp eqs x0 /\\ emp)) ] )\n)\n--- (ok) --- this got auto-approved because it was R=>R\n(applyEmbeddingRule)\n(ok) --- here is the {S} pass {S} => should be auto-approved\n\n(ok) --- this here should be auto-approved by axiom\n\n\n--- [y |-> x0 ;  ( emp /\\ xp eqs x0 ) * yp |-> x0 ]\n--- =>\n----( ( Emp /\\ xp eqs x0 ) * [y |-> x0 ; yp |-> x0] )\n--- (ok) --- implication proof works, wohoo\n\n--- part 2 begins now\n\n(\n\tapplyConsequence\n\t( Same * List(c) * (y eqs yp /\\ Emp) * (xp eqs x0 /\\ Emp) * (c eqs cp /\\ Emp) * [y |-> x0 ; yp |-> x0] )\n\t--\n\t( (Same * List(c) * (y eqs yp /\\ Emp) * (xp eqs x0 /\\ Emp) * (c eqs cp /\\ Emp) * [y |-> x0 ; yp |-> x0]) /\\ !(!(c eqs null)) ) --- R si not B\n)\n\n---(ok) --- first implication -> auto-approved being same\n(applyLoop)\n(ok) --- Loop implication -> will look in the paper to see how they prove it\n(applyConsequence\n\t([(c0 |-> -) * ((c0 plus 1) |-> c1) * (y |-> x0) * (c eqs c0 /\\ emp) \n\t\t; (c0 |-> -) * ((c0 plus 1) |-> c1) * (xp eqs x0 /\\ emp ) * (cp eqs c0 /\\ emp) ] \n\t\t* List(c1) * Same * (y eqs yp /\\ Emp) * [emp ; yp |-> x0])\n\t--\n\t([(c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (y |-> x0) * (c eqs c1 /\\ emp) \n\t\t; (c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (xp eqs x0 /\\ emp ) * (cp eqs c1 /\\ emp) ]\n\t\t* List(c1) * Same * (y eqs yp /\\ Emp) * [emp ; yp |-> x0])\n)\n\n---\n---( !(c eqs null) /\\  Same *  List(c) *  ( Emp /\\ y eqs yp ) *  ( Emp /\\ xp eqs x0 ) *  ( Emp /\\ c eqs cp ) * [y |-> x0 ; yp |-> x0]      )\n---=>\n---( Same *  List(c1) *  ( Emp /\\ y eqs yp ) *  [emp ; yp |-> x0] * [ ( emp /\\ c eqs c0 ) *  (y |-> x0) *  (c0 |-> _:AExp) * (c0 plus 1)|-> c1    ;  ( emp /\\ xp eqs x0 ) *  ( emp /\\ cp eqs c0 ) *  (c0 |-> _:AExp) *\n    ---(c0 plus 1)|-> c1   ]    )\n(ok) --- this one expands the list predicate\n(applyFrameRule (List(c1) * Same * (y eqs yp /\\ Emp) * [emp ; yp |-> x0]))\n(applyEmbeddingRule)\n(SLapplySequencing ((c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (y |-> x0) * (emp /\\ c eqs c0)))\n(SLapplySequencing ((c0 |-> -) * ((c0 plus 1) |-> c1) * (y |-> x0) * (emp /\\ c eqs c0) * (emp /\\ x eqs x0)))\n(SLapplyFrameRule ((c0 |-> -) * ((c0 plus 1) |-> c1) * (emp /\\ c eqs c0)))\n(ok) --- should be a kind of axiom with auto matching\n(SLapplyFrameRule ( (emp /\\ c eqs c0 ) *  (y |-> x0) * ((c0 plus 1)|-> c1) ) )\n(ok) --- will be matched by axiom\n(SLapplyFrameRule ( (y |-> x0) *  (c0 |->(0 minus x0)) ) )\n(ok)\n\n\n--- Second branch begin\n\n(SLapplySequencing ((c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (xp eqs x0 /\\ emp) * (emp /\\ cp eqs c0)))\n(SLapplyFrameRule ( (c0 plus 1)|-> c1 ))\n(ok) --- interpret equals somehow\n(SLapplyFrameRule  ( emp /\\ (xp eqs x0) ) )\n(ok) --- qeuals again, good example of store modification\n\n(ok) --- part 2 List decomposition proof\n(ok) --- first consequence second implication  ",
			"file": "prover/list-example.maude",
			"file_size": 3114,
			"file_write_time": 131730225009356772,
			"settings":
			{
				"buffer_size": 3555,
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/goal-graph.maude",
			"settings":
			{
				"buffer_size": 1267,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/language/language_grammar.maude",
			"settings":
			{
				"buffer_size": 1343,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/runner.maude",
			"settings":
			{
				"buffer_size": 1072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "prover/implication-prover.maude",
			"settings":
			{
				"buffer_size": 1461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 285.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"maude",
				"Set Syntax: Maude"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 492.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/usr/projects/MaudePlayground",
		"/usr/projects/MaudePlayground/prover",
		"/usr/projects/MaudePlayground/prover/language"
	],
	"file_history":
	[
		"/usr/projects/MaudePlayground/prover/separation-logic.maude",
		"/usr/projects/MaudePlayground/prover/prover-interface.maude",
		"/usr/projects/MaudePlayground/prover/prover-grammar.maude",
		"/usr/projects/MaudePlayground/prover/list-example-tests.maude",
		"/usr/projects/MaudePlayground/prover/inductive_predicates.maude",
		"/usr/projects/MaudePlayground/prover/runner.maude",
		"/usr/projects/MaudePlayground/prover/language/language_grammar.maude",
		"/usr/projects/MaudePlayground/prover/experiments.maude",
		"/usr/projects/MaudePlayground/prover/test.maude",
		"/home/alin/CloudComputing/JsonFormats.json",
		"/usr/projects/MaudePlayground/prover/relational-sep-logic.maude",
		"/usr/projects/MaudePlayground/prover/goal-graph.maude",
		"/usr/projects/MaudePlayground/prover/axiom-matching.maude",
		"/usr/projects/MaudePlayground/prover/examples.maude",
		"/usr/projects/MaudePlayground/prover/matching.maude",
		"/home/alin/LinuxSetup/ProvisioningScripts/install_i3.sh",
		"/home/alin/backup_hdd_win/alin/ProvisioningScripts/checklist",
		"/usr/projects/MaudePlayground/limbaj_simplu.maude",
		"/usr/projects/MaudePlayground/limbaj_separat.maude",
		"/home/alin/.config/i3/config",
		"/home/alin/bin/maude/maude_itp/itp-tool.maude",
		"/home/alin/projects/Licenta/MaudePlayground/setup_jetbrains_config_and_system_paths.sh",
		"/home/alin/projects/Licenta/MaudePlayground/limbaj_simplu.maude",
		"/home/alin/projects/Licenta/MaudePlayground/hoare_quadruple.maude",
		"/home/alin/projects/Licenta/MaudePlayground/prover-interface.maude",
		"/home/alin/Documents/list.fm",
		"/home/alin/.zshrc",
		"/home/alin/.config/i3blocks/config",
		"/home/alin/bin/cyclist/myocamlbuild.ml",
		"/home/alin/ProvisioningScripts/install_i3.sh",
		"/home/alin/.config/rofi/config",
		"/home/alin/ProvisioningScripts/install_monaco_font.sh",
		"/etc/apt/sources.list.d/google-chrome.list",
		"/etc/apt/sources.list.d/google.list",
		"/etc/i3status.conf",
		"/home/alin/rofi-example.config",
		"/home/alin/ProvisioningScripts/install_git.sh",
		"/home/alin/ProvisioningScripts/install_google_chrome.sh",
		"/home/alin/ProvisioningScripts/checklist",
		"/home/alin/ProvisioningScripts/install_zsh.sh",
		"/home/alin/ProvisioningScripts/projects_folder.sh",
		"/home/alin/ProvisioningScripts/install_intellij.sh",
		"/home/alin/ProvisioningScripts/install_",
		"/home/alin/ProvisioningScripts/install_webstorm.sh",
		"/home/alin/ProvisioningScripts/install_pycharm.sh",
		"/home/alin/ProvisioningScripts/install_clion.sh",
		"/home/alin/ProvisioningScripts/install_nodejs.sh",
		"/home/alin/ProvisioningScripts/install_SFNS_font.sh",
		"/home/alin/ProvisioningScripts/install_font_awesome.sh",
		"/home/alin/ProvisioningScripts/install_java"
	],
	"find":
	{
		"height": 56.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			"",
			"SLAssertion"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"rls",
			"subGoals",
			".\n",
			"3",
			"upTerm",
			"noGoal",
			"LV",
			"SLHeap",
			"LogicalVariable",
			"Stmt",
			"RAssertion",
			"SLAssertion",
			"code",
			"fmod"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"eqs",
			"Command",
			"Relation",
			"Assertion"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "prover/relational-sep-logic.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 958,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "prover/prover-interface.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11587,
						"regions":
						{
						},
						"selection":
						[
							[
								3503,
								3503
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 238.0,
						"translation.y": 1380.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "prover/list-example.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3555,
						"regions":
						{
						},
						"selection":
						[
							[
								3178,
								3178
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 759.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "prover/goal-graph.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1267,
						"regions":
						{
						},
						"selection":
						[
							[
								120,
								120
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "prover/language/language_grammar.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1343,
						"regions":
						{
						},
						"selection":
						[
							[
								1328,
								1328
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "prover/runner.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1072,
						"regions":
						{
						},
						"selection":
						[
							[
								27,
								27
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 6,
					"file": "prover/implication-prover.maude",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1461,
						"regions":
						{
						},
						"selection":
						[
							[
								1208,
								1208
							]
						],
						"settings":
						{
							"syntax": "Packages/Maude Syntax Highlighting/maude.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 85.0,
						"translation.y": 828.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 52.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.746882793017,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "maude.sublime-project",
	"replace":
	{
		"height": 98.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 316.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
