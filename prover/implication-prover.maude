load prover-interface.maude
mod IMPLICATION-PROVER is
	including PROVER-INTERFACE .

	--- BEGIN proof rules
	vars R S T : Relation .
	vars P1 P2 Q1 Q2 : Assertion .
	vars P Q : Assertion .
	vars E E' E1 E1' : AExp .

	--- Relational BExp in case we change it later
	var B : BExp .

	rl R * false => false .

	---rl (emp ; emp) => Emp .

	rl R * ( S \/ T ) => (R * S) \/ (R * T) .

	rl [(P1 * P2) ; Q1 * Q2] => [P1 ; Q1] * [P2 ; Q2] .
---
	---rl R * (exists x . S) => (exists x . R) * S .
---
	rl [(P1 /\ P2) ; Q ] => [P1 ; Q] /\ [ P2 ; Q ] .
---
	---rl (P ; (Q1 /\ Q2)) => (P ; Q1) /\ (P ; Q2).
---
	---rl ((P1 \/ P2) ; Q ) => (P1 ; Q) \/ ( P2 ; Q) .
---
	---rl (P ; (Q1 \/ Q2)) => (P ; Q1) \/ (P ; Q2).
---
	---rl (P ; false) => false .
---
	---rl (false ; Q) => false .
---
	---rl R * ((E rls E') /\ Emp) => R /\ (E rls E') .
---
	---rl (R * Q) /\ B => R * (Q /\ B) .
---
	---rl ( (P /\ B) ; Q) => (P ; (Q /\ B)) .
---
	---rl (P ; (Q /\ B)) => (P ; Q) /\ B .
---
	---rl (P ; Q) * (Emp * E rls E') => ((P * (emp * E rls E')) ; Q) .
---
	---rl ((P * (emp * E rls E')) ; Q) => (P ; (Q * (emp * E rls E'))) .
	
	--- Here we switch from <=> to => 

	---rl Emp =>> Same .

	---rl Same * Same =>> Same .

	---rl ( E |-> E1 ; E |-> E1) =>> Same .

	---rl Same /\ ( (E |-> E1 ; E |-> E1') * true ) =>> E1 rls E1' .

 endm

