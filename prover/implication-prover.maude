load prover-grammar.maude


mod IMPLCATION-PROVER is
	protecting NAT .
	including PROVER-GRAMMAR .

	--- BEGIN proof rules
	vars R S T : Relation .
	vars P1 P2 Q1 Q2 : Assertion .
	vars P Q : Assertion .
	vars E E' E1 E1' : AExp .

	--- Relational BExp in case we change it later
	var B : BExp .

	eq R * false = false .

	eq (emp ; emp) = Emp .

	eq R * ( S \/ T ) = (R * S) \/ (R * T) .

	eq ((P1 * P2) ; Q1 * Q2) = (P1 ; Q1) * (P2 ; Q2) .

	eq R * (exists x . S) = (exists x . R) * S .

	eq ((P1 /\ P2) ; Q ) = (P1 ; Q) /\ ( P2 ; Q) .

	eq (P ; (Q1 /\ Q2)) = (P ; Q1) /\ (P ; Q2).

	eq ((P1 \/ P2) ; Q ) = (P1 ; Q) \/ ( P2 ; Q) .

	eq (P ; (Q1 \/ Q2)) = (P ; Q1) \/ (P ; Q2).

	eq (P ; false) = false .

	eq (false ; Q) = false .

	eq R * ((E eqs E') /\ Emp) = R /\ (E eqs E') .

	eq (R * Q) /\ B = R * (Q /\ B) .

	eq ( (P /\ B) ; Q) = (P ; (Q /\ B)) .

	eq (P ; (Q /\ B)) = (P ; Q) /\ B .

	eq (P ; Q) * (Emp * E eqs E') = ((P * (emp * E eqs E')) ; Q) .

	eq ((P * (emp * E eqs E')) ; Q) = (P ; (Q * (emp * E eqs E'))) .

	rl Emp => Same .

	rl Same * Same => Same .

	rl ( E |-> E1 ; E |-> E1) => Same .

	rl Same /\ ( (E |-> E1 ; E |-> E1') * true ) => E1 eqs E1' .

 endm

