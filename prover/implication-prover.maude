load relational-sep-logic.maude
mod IMPLICATION-PROVER is
	including HOARE-QUADRUPLE .

	--- BEGIN proof rules
	vars R S T : Relation .
	vars P1 P2 Q1 Q2 : Assertion .
	vars P Q : Assertion .
	vars E E' E1 E1' : AExp .

	vars X Y : Id .

	rl (R => R) => true .

	--- Relational BExp in case we change it later
	var B : BExp .

	rl R * (Emp /\ B) => B .

	rl (B <=> B) => true . 

	rl (R => true) => true .

	rl ( (R * (Emp /\ X eqs Y)) => S) => ((replace(R, X, Y) => replace(S, X, Y))) .



	rl R * false => false .

	rl [emp ; emp] => Emp .

	rl R * ( S \/ T ) => (R * S) \/ (R * T) .

	rl [(P1 * P2) ; Q1 * Q2] => [P1 ; Q1] * [P2 ; Q2] .
---
	rl R * (exists x . S) => (exists x . R) * S .
---
	rl [(P1 /\ P2) ; Q ] => [P1 ; Q] /\ [ P2 ; Q ] .
---
	rl [P ; (Q1 /\ Q2)] => [P ; Q1] /\ [P ; Q2] .
---
	rl [(P1 \/ P2) ; Q ] => [P1 ; Q] \/ [P2 ; Q] .
---
	rl [P ; (Q1 \/ Q2)] => [P ; Q1] \/ [P ; Q2].
---
	rl [P ; false] => false .
---
	rl [false ; Q] => false .
---
	--- This rule seems to cause problems with infinite loops??
	---rl R * ((E eqs E') /\ Emp) => R /\ (E eqs E') .
---
	rl (R * Q) /\ B => R * (Q /\ B) .
---
	rl [ (P /\ B) ; Q ] => [ P ; (Q /\ B) ] .
---
	rl [ P ; (Q /\ B) ]  => [P ; Q ] /\ B .
---

	rl [P ; Q] * (Emp * E eqs E') => [(P * (emp * E eqs E')) ; Q] .

	--- De sus o trec jos
	rl [ (P * (emp /\ E eqs E')) ; Q ] => [ P ; (Q * (emp /\ E eqs E')) ] .

	--- De jos o trec in afara
	rl [ P ; (Q * (emp /\ E eqs E')) ] => [ P ; Q ] * (Emp /\ E eqs E') .
	--- Here we switch from <=> to => 

	rl Emp => Same .

	rl Same * Same => Same .

	rl [ E |-> E1 ; E |-> E1 ] => Same .

	rl Same /\ ( [E |-> E1 ; E |-> E1'] * true ) => E1 eqs E1' .

	op replace : Relation Id Id -> Relation .
	op replace : Assertion Id Id -> Assertion .

 endm

