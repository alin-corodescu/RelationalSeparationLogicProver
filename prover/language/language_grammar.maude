mod LANGUAGE-GRAMMAR is
	including INT .
	including BOOL .
	sorts AExp BExp Command Comparison . 
	sort Id . 

	subsorts Bool Comparison < BExp .
	subsorts Id Int < AExp .

	--- Sort for defining the list in the cons(E1,E2 .. En) operator
	sort AllocationList . 
	subsort AExp < AllocationList . 
	op _,_ : AllocationList AExp -> AllocationList .
	--- TODO create different ways to define AllocationLists
	--- please refer to the Fig 1. of the Relational Separation logic for reference on the syntax of this language

	op _;_ : Command Command -> Command [format (i d n d)].
	op _:=cons(_) : Id AllocationList -> Command [format (i s s d d d)].  
	op _:=[_] : Id AExp -> Command [format (i s s d d d)]. 
	op [_]:=_ : AExp AExp -> Command [format (i d d s s d)]. 
	op free : AExp -> Command .
	op _:=_ : Id AExp -> Command [format (i s s d)] . 

	op if_then_else_ : BExp Command Command -> Command [ctor format (nic! o c! no++i --nic! no++i --)] .
	op while_do_od : BExp Command -> Command [ctor format (nic! o c! no++i --nic! o)] .

	--- todo look for a workaround to allow us to use proper operators
	ops _plus_ _times_ _minus_ : AExp AExp -> AExp [ctor] .

	--- Now begin the boolean expressions
	ops _ge_ _le_ _eqs_ : AExp AExp -> Comparison .

	--- Are they truly different from their assertions counterparts?
	ops _&&_ _||_ _->_ _<=>_ : BExp BExp -> BExp .
	op !_ : BExp -> BExp .

	op pass : -> Command .

	--- the null pointer
	op null : -> AExp .
	ops x y z t : -> Id .
endm
