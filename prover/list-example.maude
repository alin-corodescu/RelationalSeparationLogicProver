

load prover-interface.maude
loop init .
(prove(
	{ 
		((
			Same 
			*
			List(c) 
			*
			[ y |-> x0 ; yp |-> x0 ]
		) 
		*
		(y eqs yp /\ Emp))
		*
		(c eqs cp /\ Emp)
	}
	pass ; 
	while (! (c eqs null))
	do 
		x := [y] ; 
		[c] := 0 minus x ;
		c := [c plus 1]
	od
	--
	xp := [yp] ;
	while (! (cp eqs null))
	do 
		[cp] := 0 minus xp ;
		cp := [cp plus 1] 
	od
	{
		(Same
		*
		(y eqs yp /\ Emp))
		* 
		(c eqs cp /\ Emp)
	}
	)
)

(applySequencing ( Same * List(c) * [ y |-> x0 ; yp |-> x0 ] * (y eqs yp /\ Emp) * (c eqs cp /\ Emp) * (xp eqs x0 /\ Emp) ) )


(applyFrameRule (Same * List(c) * (y eqs yp /\ Emp) * (c eqs cp /\ Emp)) ) --- aici e interesant ca se face matching si dupa comutativitate

(
	applyConsequence
	( [ (y |-> x0) ; (yp |-> x0) ] )
	--
	( [ (y |-> x0) ; ((yp |-> x0) * (xp eqs x0 /\ emp)) ] )
)
--- (ok) --- this got auto-approved because it was R=>R
(applyEmbeddingRule)
---(ok) --- here is the {S} pass {S} => should be auto-approved

---(ok) --- this here should be auto-approved by axiom


--- [y |-> x0 ;  ( emp /\ xp eqs x0 ) * yp |-> x0 ]
--- =>
----( ( Emp /\ xp eqs x0 ) * [y |-> x0 ; yp |-> x0] )
--- (ok) --- implication proof works, wohoo

--- part 2 begins now

(
	applyConsequence
	( Same * List(c) * (y eqs yp /\ Emp) * (xp eqs x0 /\ Emp) * (c eqs cp /\ Emp) * [y |-> x0 ; yp |-> x0] )
	--
	( (Same * List(c) * (y eqs yp /\ Emp) * (xp eqs x0 /\ Emp) * (c eqs cp /\ Emp) * [y |-> x0 ; yp |-> x0]) /\ !(!(c eqs null)) ) --- R si not B
)

---(ok) --- first implication -> auto-approved being same
(applyLoop)
(ok) --- Loop implication -> will look in the paper to see how they prove it
(applyConsequence
	([(c0 |-> -) * ((c0 plus 1) |-> c1) * (y |-> x0) * (c eqs c0 /\ emp) 
		; (c0 |-> -) * ((c0 plus 1) |-> c1) * (xp eqs x0 /\ emp ) * (cp eqs c0 /\ emp) ] 
		* List(c1) * Same * (y eqs yp /\ Emp) * [emp ; yp |-> x0])
	--
	([(c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (y |-> x0) * (c eqs c1 /\ emp) 
		; (c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (xp eqs x0 /\ emp ) * (cp eqs c1 /\ emp) ]
		* List(c1) * Same * (y eqs yp /\ Emp) * [emp ; yp |-> x0])
)

---
---( !(c eqs null) /\  Same *  List(c) *  ( Emp /\ y eqs yp ) *  ( Emp /\ xp eqs x0 ) *  ( Emp /\ c eqs cp ) * [y |-> x0 ; yp |-> x0]      )
---=>
---( Same *  List(c1) *  ( Emp /\ y eqs yp ) *  [emp ; yp |-> x0] * [ ( emp /\ c eqs c0 ) *  (y |-> x0) *  (c0 |-> _:AExp) * (c0 plus 1)|-> c1    ;  ( emp /\ xp eqs x0 ) *  ( emp /\ cp eqs c0 ) *  (c0 |-> _:AExp) *
    ---(c0 plus 1)|-> c1   ]    )
(ok) --- this one expands the list predicate
(applyFrameRule (List(c1) * Same * (y eqs yp /\ Emp) * [emp ; yp |-> x0]))
(applyEmbeddingRule)
(SLapplySequencing ((c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (y |-> x0) * (emp /\ c eqs c0)))
(SLapplySequencing ((c0 |-> -) * ((c0 plus 1) |-> c1) * (y |-> x0) * (emp /\ c eqs c0) * (emp /\ x eqs x0)))
(SLapplyFrameRule ((c0 |-> -) * ((c0 plus 1) |-> c1) * (emp /\ c eqs c0)))
---(ok) --- should be a kind of axiom with auto matching
(SLapplyFrameRule ( (y |-> x0) * ((c0 plus 1)|-> c1) ) )
(ok) --- will be matched by axiom, need to interpret equals
(SLapplyFrameRule ( (y |-> x0) *  (c0 |->(0 minus x0)) ) )
(ok) --- interpret equals


--- Second branch begin

(SLapplySequencing ((c0 |-> (0 minus x0)) * ((c0 plus 1) |-> c1) * (xp eqs x0 /\ emp) * (emp /\ cp eqs c0)))
(SLapplyFrameRule ( (c0 plus 1)|-> c1 ))
(ok) --- interpret equals somehow
(SLapplyFrameRule  ( emp /\ (xp eqs x0) ) )
(ok) --- qeuals again, good example of store modification

(ok) --- part 2 List decomposition proof
(ok) --- first consequence second implication  