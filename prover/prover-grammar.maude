load goal-graph.maude

mod PROVER-GRAMMAR is
	protecting NAT .
	including HOARE-QUADRUPLE .
	including GOAL-GRAPH . 

	--- Sort representing actions on the goals.
	sort Action . 

	op noRule : -> Action .



	--- Hoare triples and quadruples can be seen as goals
	subsorts HoareQuadruple HoareTriple < Goal . 

	--- BEGIN sort and operation declaration for passing the terms which appear on the right hand side of the
	--- rule for the first time (example : S Relation for the sequencing rule)
	---sort AdditionalRuleParameters . 
	---subsort Relation < AdditionalRuleParameters .

	---op __ : AdditionalRuleParameters AdditionalRuleParameters -> AdditionalRuleParameters.
	--- END

	--- Enables appending the additional parameters to the goals stored in the database
	---op __ : Goal AdditionalRuleParameters -> Goal .

	--- Implication between two Relation is a goal
	--- op _=>_ : Relation Relation -> Goal . 
	--- use cmb here, a relation is a Goal if it can be written as a Relation => Relation
	subsort Relation < Goal . 


	op prove : HoareQuadruple -> Action .

	--- Action used to mark a goal as proven
	op ok : -> Action .

	op stop : -> Action .

	op showGoal : -> Action .

	op check : -> Action .

	op implication : -> Action .

	op applyEmbeddingRule : -> Action .

	--- The T parameter of the Frame rule -- a separable heap
	op applyFrameRule_ : Relation -> Action . 


	--- TODO left to implement
	--- The {S} parameter for the sequencing rule
	op applySequencing_ : Relation -> Action . 

	--- The 2 parameters are R1 and S1 from the paper
	op applyConsequence__ : Relation Relation -> Action .

	--- Pass R1,R2,S1,S2 as parameters to the action
	op applyConjunction____ : Relation Relation Relation Relation -> Action .

	op applyAuxVarElimination_ : Id -> Action .
 
	op applyLoop : -> Action .

	op applyConditionalStatement : -> Action .

	op SLapplyFrameRule_ : Assertion -> Action .

	op SLapplySequencing_ : Assertion -> Action .

	op SLapplyConsequence__ : Assertion Assertion -> Action .

	op SLapplyAuxVarElimination_ : Id -> Action .

	op SLapplyLoop : -> Action .

	op SLapplyConditionalStatement : -> Action .


 endm

