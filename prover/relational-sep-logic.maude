load separation-logic.maude

mod HOARE-QUADRUPLE is
	including HOARE-TRIPLE . 

	sort HoareQuadruple . 
	--- Relational separation logic condition / predicate - R S
	sort Relation .

	--- Not sure if it should be another BExp, or the same - True vs true in the paper
	subsort BExp < Relation .

	op {_}_--_{_} : Relation Command Command Relation -> HoareQuadruple [format (ng d d on rn on gn d d o)].


	op Emp : -> Relation .
	op Same : -> Relation .
	op [_;_] : Assertion Assertion -> Relation [format (d d s s d d)].
	--- Operators between the RSL assertions
	op _*_ : Relation Relation -> Relation [comm assoc format (d s t d)] .
	op _=>_ : Relation Relation -> Relation [prec 40 format (d nr no d)] .
	ops _/\_ _\/_ : Relation Relation -> Relation [comm format (d s t d)] .
	op !_ : Relation -> Relation .
	op _<=>_ : Relation Relation -> Relation [comm format (d d d d)] .
	ops exists_._ any_._ : Id Relation -> Relation .

	op r : -> Relation .

	--- Define other predicates here
	op List : Id -> Relation . 



	op replace : Relation Id Id -> Relation .
	var R S : Relation .
	vars P1 P2 : Assertion .
	vars X Y : Id .

	eq replace([P1 ; P2], X, Y) = [replace(P1, X, Y) ; replace(P2, X, Y)] .
	eq replace(R * S, X, Y) = replace(R, X, Y) * replace(S, X , Y) .
	eq replace(R /\ S, X, Y) = replace(R, X, Y) /\ replace(S, X , Y) .
	eq replace(R \/ S, X, Y) = replace(R, X, Y) \/ replace(S, X , Y) .
	eq replace(Emp, X, Y) = Emp .
	eq replace(Same, X, Y) = Same . 
	eq replace(R, X, Y) = R [owise] .

	eq ! ! R = R .
	eq ! (R /\ S) = ! R \/ ! S .
	eq ! (R \/ S) = ! R /\ ! S .
	eq R <=> S = (R => S) /\ (S => R) .
	eq R => S = (! R) \/ S .
	eq R \/ ! R = true .
	eq R /\ ! R = false .

	eq ! true = false .
	eq ! false = true .

endm 
