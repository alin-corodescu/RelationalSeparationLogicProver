load language/language_grammar.maude

mod HOARE-TRIPLE is 
	protecting INT .
	including LANGUAGE-GRAMMAR .
	protecting META-LEVEL .

	sort HoareTriple .


	sort Assertion .

	op {_}_{_} : Assertion Command Assertion -> HoareTriple [format (m s s no nm d d o)].

	subsort BExp < Assertion .

	op _*_ : Assertion Assertion -> Assertion [comm assoc format (s s s s)] .

	op _=>_ : Assertion Assertion -> Assertion [prec 40 format (d nr no d)] .

	ops _\/_ _/\_ : Assertion Assertion -> Assertion [comm format (s s s s)] .

	op not : Assertion -> Assertion .

	op emp : -> Assertion .

	op _ |-> _ : AExp AExp -> Assertion .

	ops exists_._ any_._ : Id Assertion -> Assertion .

	--- Constructors used for testing purposes only
	---ops a b : -> Assertion .

	op - : -> AExp .
	eq - = downTerm('_:AExp, null) .


	--- Replace the id of a variable with another variable
	op replace : Assertion Id Id -> Assertion .

	var P Q : Assertion .
	vars X Y : Id .
	vars E E1 E2 : AExp .
	var C : Command .
	eq replace(P * Q, X, Y) = replace(P, X, Y) * replace(Q, X , Y) .
	eq replace(P /\ Q, X, Y) = replace(P, X, Y) /\ replace(Q, X , Y) .
	eq replace(P \/ Q, X, Y) = replace(P, X, Y) \/ replace(Q, X , Y) .
	eq replace(emp, X, Y) = emp .
	eq replace(E |-> E2, X, Y) = replace(E, X, Y) |-> replace(E2, X, Y) .
	
	eq replace(P, X, Y) = P [owise] .
	--- replace x with y
	--- to do, replace it inside a boolean expression
	vars B B1 B2 : BExp .
	op replace : BExp Id Id -> BExp .
	--- This here should be further reduced to replace in Aexp
	eq replace(B1 <=> B2, X, Y) = replace(B1, X, Y) <=> replace(B2, X, Y) .
	eq replace(! B, X, Y) = ! replace(B, X, Y) .
	eq replace(X eqs E, X, Y) = Y eqs E .
	eq replace(E eqs X, X, Y) = E eqs Y .
	eq replace(B, X, Y) = B [owise] .

	op replace : Command Id Id -> Command .
	eq replace(E1 :=cons(E2), X, Y) = replace(E1, X, Y) :=cons(replace(E2, X, Y)) .
	eq replace(E1 := [E], X, Y) = replace(E1, X, Y) := [replace(E, X, Y)] .
	eq replace([E1] := E2, X, Y) = [replace(E1, X, Y)] := replace(E2, X, Y) .
	eq replace(free(E1), X, Y) = free(replace(E1, X, Y)) .
	eq replace(E1 := E, X, Y) = replace(E1, X, Y) := replace(E, X, Y) .	

	eq replace(X, X, Y) = Y .
	eq replace(C, X, Y) = C [owise] .		 

	op replace : AExp Id Id -> AExp .
	eq replace(X plus E, X, Y) = Y plus E .
	eq replace(X times E, X, Y) = Y times E .
	eq replace(X minus E, X, Y) = Y minus E .

	eq replace(E plus X, X, Y) = E plus Y .
	eq replace(E times X, X, Y) = E times Y .
	eq replace(E minus X, X, Y) = E minus Y .
	eq replace(E, X , Y) = E [owise] .


endm