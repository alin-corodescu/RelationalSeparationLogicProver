--- Exemplul 1
load prover-interface.maude
loop init .
(prove({x |-> 1 ; x |-> 1} [x] := 2 -- [x] := 2 {x |-> 2 ; x |-> 2}))
(applyEmbeddingRule)
---(ok) the ok no longer needed

--- Exemplul 2
load prover-interface.maude
loop init .
(prove (
	{ 
		(
			(x |-> 1) * (y |-> 1) ;
			(z |-> 1) * (t |-> 1)
		)
		*
		(x eqs z /\ Emp)
		*
		(y eqs t /\ Emp)
	}
	[x] := 2 ; [y] := 3
	--
	[t] := 3 ; [z] := 2
	{
		Same
		*
		(x eqs z /\ Emp) 
		*
		(y eqs t /\ Emp)
	}
	)
)




(((x |-> 1) * y |-> 1) ; (z |-> 1) * t |-> 1) => ((x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1))
    <> {(x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1)}[x]:= 2 -- [t]:= 3{(x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)} 
    <> ((x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)) => (((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1) 
    <> {((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1}[y]:= 3 -- [z]:= 2{((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3} 
    <> ((((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3) * (x eqs z /\ Emp) * (y eqs t /\ Emp)) => (Same * (x eqs z /\ Emp) * (y eqs t /\ Emp))


Maude> match G:Goal <> GL:GoalList <=? (((x |-> 1) * y |-> 1) ; (z |-> 1) * t |-> 1) => ((x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1))
>     <> {(x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1)}[x]:= 2 -- [t]:= 3{(x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)} 
>     <> ((x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)) => (((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1) 
>     <> {((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1}[y]:= 3 -- [z]:= 2{((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3} 
>     <> ((((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3) * (x eqs z /\ Emp) * (y eqs t /\ Emp)) => (Same * (x eqs z /\ Emp) * (y eqs t /\ Emp)) .
match in PROVER-INTERFACE : G <> GL <=? (((x |-> 1) * y |-> 1) ; (z |-> 1) * t |-> 1) => ((x |-> 1 ; t
    |-> 1) * (y |-> 1 ; z |-> 1)) <> {(x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1)}[x]:= 2 -- [t]:= 3{(x |->
    2 ; t |-> 3) * (y |-> 1 ; z |-> 1)} <> ((x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)) => (((x |-> 2) * y
    |-> 1) ; (t |-> 3) * z |-> 1) <> {((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1}[y]:= 3 -- [z]:= 2{((x
    |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3} <> ((((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3) * (x eqs z
    /\ Emp) * (y eqs t /\ Emp)) => (Same * (x eqs z /\ Emp) * (y eqs t /\ Emp)) .
Decision time: 0ms cpu (0ms real)
No match.

Maude> match G:Goal <=? (((x |-> 1) * y |-> 1) ; (z |-> 1) * t |-> 1) => ((x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1)) .
match in PROVER-INTERFACE : G <=? (((x |-> 1) * y |-> 1) ; (z |-> 1) * t |-> 1) => ((x |-> 1 ; t |-> 1) *
    (y |-> 1 ; z |-> 1)) .
Decision time: 0ms cpu (0ms real)

Solution 1
G --> (((x |-> 1) * y |-> 1) ; (z |-> 1) * t |-> 1) => ((x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1))


Maude> match GL:GoalList <=? {(x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1)}[x]:= 2 -- [t]:= 3{(x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)} 
>     <> ((x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)) => (((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1) 
>     <> {((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1}[y]:= 3 -- [z]:= 2{((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3} 
>     <> ((((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3) * (x eqs z /\ Emp) * (y eqs t /\ Emp)) => (Same * (x eqs z /\ Emp) * (y eqs t /\ Emp)) .
match in PROVER-INTERFACE : GL <=? {(x |-> 1 ; t |-> 1) * (y |-> 1 ; z |-> 1)}[x]:= 2 -- [t]:= 3{(x |-> 2
    ; t |-> 3) * (y |-> 1 ; z |-> 1)} <> ((x |-> 2 ; t |-> 3) * (y |-> 1 ; z |-> 1)) => (((x |-> 2) * y
    |-> 1) ; (t |-> 3) * z |-> 1) <> {((x |-> 2) * y |-> 1) ; (t |-> 3) * z |-> 1}[y]:= 3 -- [z]:= 2{((x
    |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3} <> ((((x |-> 2) * y |-> 3) ; (z |-> 2) * t |-> 3) * (x eqs z
    /\ Emp) * (y eqs t /\ Emp)) => (Same * (x eqs z /\ Emp) * (y eqs t /\ Emp)) .
Decision time: 0ms cpu (0ms real)
No match.





 ***(   --- load axioms as proven goals
    rl [loadAxioms] : < noRule ; noGoal ; noGoal ; emptyGL ; emptyGL ; nil >
    	=>
    	< noRule ; noGoal ; noGoal ; emptyGL ; 
		downTerm('`{_`}_`{_`}['_|->_['E:AExp,'s_['0.Zero]],'`[_`]:=_['E:AExp,'F:AExp],'_|->_['E:AExp,'F:AExp]] , emptyGL)
***(
    	 ; 'axioms '  'loaded > .)

***(
This is how we will implement axioms
Maude> parse { E:AExp |-> 1 } E:AExp := F:AExp { E:AExp |-> F:AExp } .
[GoalGraph,GoalList]: {E:AExp |q-> 1}E:AExp := F:AExp{E:AExp |-> F:AExp}

xmatch { E:AExp |-> 1 } [E:AExp] := F:AExp { E:AExp |-> F:AExp } <=? { x plus 1 |-> 1 } [ x plus 1 ] := 10 { x plus 1 |-> 10 } .
xmatch in PROVER-INTERFACE : {E:AExp |-> 1}[E:AExp]:= F:AExp{E:AExp |-> F:AExp} <=? {(x plus 1) |-> 1}[x
    plus 1]:= 10{(x plus 1) |-> 10} .
Decision time: 0ms cpu (0ms real)
***(
red anyMatches({ x plus 1 |-> 1 } [ x plus 1 ] := 10 { x plus 1 |-> 10 }, { E:AExp |-> 1 } [E:AExp] := F:AExp { E:AExp |-> F:AExp }).
)***
***(
Solution 1
E:AExp --> x plus 1
F:AExp --> 10
)